Lecture 16

* Variadic functions
** A function that has variable arity (takes a variable number of arguments)
   Like printf()
        scanf()
        open()
   What's going on with v*printf()?
** How can we write such a function?
   Need to use stdarg(3).  stdarg.h declares a type, va_list, and a handful
   of macros to work on that type:
       void va_start(va_list ap, last);
       type va_arg(va_list ap, type);
       void va_end(va_list ap);
       void va_copy(va_list dest, va_list src);
   The man page makes them look like functions, but really they're macros.

Pick up here next time...

   Play with example code...

* Variadic macros
** Simpler than variadic functions.  End your argument list with an elipsis
   and replace it with __VA_ARGS__.  For example:
     #define eprintf(...) fprintf(stderr, __VA_ARGS__)
** Special meaning for the concatenation operator, ##
   Above macro leads to a compile-time error if called with no arguments:
     eprintf() -> fprintf(stderr,)
   If you use ## ahead of __VA_ARGS__, then if __VA_ARGS__ is empty, the 
   preceding comma is removed:
     #define eprintf(...) fprintf(stderr, ##__VA_ARGS__)
   yielding
     eprintf() -> fprintf(stderr)
   which is still an error, since a format string is required.
...

   Play with example code...

* Variadic macros
** Simpler than variadic functions.  End your argument list with an elipsis
   and replace it with __VA_ARGS__.  For example:
     #define eprintf(...) fprintf(stderr, __VA_ARGS__)
** Special meaning for the concatenation operator, ##
   Above macro leads to a compile-time error if called with no arguments:
     eprintf() -> fprintf(stderr,)
   If you use ## ahead of __VA_ARGS__, then if __VA_ARGS__ is empty, the 
   preceding comma is removed:
     #define eprintf(...) fprintf(stderr, ##__VA_ARGS__)
   yielding
     eprintf() -> fprintf(stderr)
   which is still an error, since a format string is required.

* Common command-line switches
** -g
** -c
** -o
** -Wall (and -Werror)
** -O
** -D
** -I
** -L
** -l
** To help with makefiles: -MMD -MF
** For profiling: -pg
** To be annoying: -ansi
** To be *really* annoying: -pedantic

* Neat trick for variable-length (flexible) arrays
* Curses (Ncurses)
