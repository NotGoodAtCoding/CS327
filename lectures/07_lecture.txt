Lecture 07

* Stuff for next part of project that we haven't covered yet
** C strings
   Arrays of characters terminated with '\0' (the character 0).
   If your string doesn't end with '\0', the standard library string
   processing functions won't know when to stop, so they will run off
   the end and bad things will happen.
   When you use a string literal, e.g. "string", the NULL terminator 
   is implicitly created, so "string" is 7 bytes (6 letters + NULL).
   There is a difference between:
     char *sptr = "string";
   else 
     char sarr[] = "string";
   Both are 7 bytes, but the former goes in memory in a location that
   makes it immutable.  You can change sptr, but you can't change sptr[i].
   sarr[i] can be changed.
*** string(3) lists all of the string functions in the standard library
    You might want strcat() for this assignment
    Concatenates two strings
*** Indexing and using individual characters
    Strings are character arrays, so you can index them with array or pointer
    semantics:  s[i] == *(s + i)
*** snprintf() is also useful
    int snprintf(char *str, size_t size, const char *format, ...);
    Just like printf(), but write at most size bytes to str.
** Command line arguments
   argc and argv
   int main(int argc, char *argv[])
   argc -- argument count
   argv -- argument vector
** File I/O
*** FILE *fopen(const char *path, const char *mode);
    Used to open a file
    path is the path to the file
    mode is the file access mode (read, write, append, or read/write)
    read == "r"
    write == "w"
    Returns NULL on failure
*** int fclose(FILE *fp);
    Closes a file previously opened by fopen()
*** int fprintf(FILE *stream, const char *format, ...);
    Just like printf(), but first parameter is a FILE *
*** int fscanf(FILE *stream, const char *format, ...);
    Analogous to printf, but for reading
*** char *fgets(char *s, int size, FILE *stream);
    Reads one line at a time, up to size bytes, where size if the ammount of
    storage available in s; analogous function called gets()
*** size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream);
    Writes binary data to file from ptr, each element is size bytes, there
    are nmemb elements, write to stream
*** size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream);
    Analogous to fwrite, but reads
** Write an example program that uses all of the above (save endianness)...
   Program takes one of four switchs: -wt, -wb, -rt, and -rb, specifying
   whether to read or write text or binary, followed by a file name.  File
   will be under $HOME, so we'll build a path, open the follow, and perform
   the requested operation using some internal data structure.
