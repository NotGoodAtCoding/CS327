Lecture 17, Feb 20 2015

* Variadic functions
** A function that has variable arity (takes a variable number of arguments)
   Like printf()
        scanf()
        open()
   What's going on with v*printf()?
** How can we write such a function?
   Need to use stdarg(3).  stdarg.h declares a type, va_list, and a handful
   of macros to work on that type:
       void va_start(va_list ap, last);
       type va_arg(va_list ap, type);
       void va_end(va_list ap);
       void va_copy(va_list dest, va_list src);
   The man page makes them look like functions, but really they're macros.

   Play with example code...

* Variadic macros
** Simpler than variadic functions.  End your argument list with an elipsis
   and replace it with __VA_ARGS__.  For example:
     #define eprintf(...) fprintf(stderr, __VA_ARGS__)
** Special meaning for the concatenation operator, ##
   Above macro leads to a compile-time error if called with no arguments:
     eprintf() -> fprintf(stderr,)
   If you use ## ahead of __VA_ARGS__, then if __VA_ARGS__ is empty, the 
   preceding comma is removed:
     #define eprintf(...) fprintf(stderr, ##__VA_ARGS__)
   yielding
     eprintf() -> fprintf(stderr)
   which is still an error, since a format string is required.

* Common command-line switches
** -g
   Inserts debugging symbols
   -g1 -g2 -g3 -ggdb
** -c
   Partial compile (don't link, create a .o)
** -o
   Names the output
** -Wall (and -Werror)
   -Wall turns on lots of useful warnings
   -Werror turns those warnings into errors
** -O
   Optimization
   -O1 -O2 -O3 
   -O3 is scary.  Does optimizations that may be incorrect.
** -D
   Defines macros on the command line
   -DDEBUG=2
** -I
   Add a path to search for include files
** -L
   Add a path for library search (for the linker)
** -l
   Specifies a library to link
   -lm
   -lncurses
   -lpthread
** To help with makefiles: -MMD -MF
   Automatic dependency generation
** For profiling: -pg
   So that you can optimize intelligently
** To be annoying: -ansi
** To be *really* annoying: -pedantic

* Curses (Ncurses)
  To get data types: #include <ncurses.h>
  To link in library: -lncurses
** Initialization:
   WINDOW *initscr(void)
   int raw(void)
   int noecho(void)
   int curs_set(int visibility)
   int keypad(WINDOW *win, bool bf)

   My solution to 1.05 uses:

   void io_init_terminal(void)
   {
     initscr();
     raw();
     noecho();
     curs_set(0);
     keypad(stdscr, TRUE);
   }

** Deinitialization
   int endwin(void)
** Reading input
   int getch(void)
** Displaying
   int clear(void)
   int mvaddch(int y, int x, const chtype ch)
   int refresh(void)
** Other I/O
   See chrs_addch(3), curs_printw(3), curs_getch(3) and curs_scanw(3)
** More info
   Fairly comprehensive coverage in curses(3), including a list of all curses
   functions.
   Lots of curses tutorials and quick-start guides on the web.
   Check out ncurses.h (in /usr/include/ncurses.h on pyrite).  

* Neat trick for variable-length (flexible) arrays
