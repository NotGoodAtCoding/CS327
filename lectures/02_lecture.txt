Lecture 02

* Motivation: Why learn C?
** Jobs
   You'll never be unemployed if you are a good C programmer
** Systems programming
   Almost all systems programming is done in C
** Understanding computers
   Low level enough to see what the computer does
* C History and Philosophy
** History
*** Thompson and UNIX
    Finished first UNIX in 1969
*** Thompson wanted a language
    Started with BCPL
    Modified it, named the new language B
*** Ritchie joined the project
    Added types
    Added some other things, flow control, records...
    Result was a new language called C
*** C was used to rewrite UNIX
*** Versions
    Brian Kernighan helped write "The C Programming Language" K&R C
    Second version was standardized ANSI in 1989: C89/C90  -> Second edition
    of book
    ANSI/ISO C99 in 1999.  Nobody uses this.  No full implementation exists.
    ANSI/ISO C11.  I know nothing about this.  :`(
** Philosophy
*** No feature should impact performance of programs that don't use it
    Because systems were weak
*** Easy to compile
    Because we want to understand and compiler technology was in its infancy
*** Programmer is right
    Compiler will not second guess.  Caveat emptor!
* Things needed for first assignment
  These are not "things you are required to have", but rather "things I
  cannot reasonably envision a solution not to have"
** Functions
   Functions in C are very similar to functions (methods) in Java.
   <return type> <function name>(<argument list>)
   Where <return type> is a valid type, <function name> is a valid
   identifier, and <argument list> is a comma-delimited list of types
   and identifiers, just as in java.
** Arrays
   No need to allocate (so far, we'll learn more later), and brackets come 
   after the name, so an array of 12 chars, s, is declared:
      char s[12];
   and a three dimensional array (matrix) of 4x5x4 ints, m, is declared:
      int m[4][5][4].
** Printing
   Use printf().  Takes a C string (a character array) with "conversion
   specifiers"
   "%d" specifies an int argument to follow.
   Not covered in class: %c specifies a char, %s a string, %f a double
   Specifiers get mixed with normal text to produce more complex output:
     char name[] = "Jeremy";
     int office = 110;
     printf("My name is %s, and my office is in room %d.\n", name, office);
   Notice that the arguments are in the same order as the specifiers.
   We also saw how to specify a minimum field width (put a number between the
   '%' and the letter; example in times_table.c).
** Compiling and Makefiles
   Compile with "gcc <C file>" to produce a binary "a.out"
   Add switches for more control.
   -Wall turns on (almost) all warnings.  Always use it.  It can save you.
   -Werror turns warnings into errors.  Not necessary, but useful.  I always
   use it.
   -g tells the compiler to put debugging symbols in the binary.  -ggdb tells
   it to put even more symbols that only gdb can understand (a good thing,
   unless you're debugging with something else).  We'll talk about gdb a bit
   next week.
   -o lets you name the output of the compiler.  "gcc hello.c -o hello"
   produces a binary named "hello", instead of "a.out".
   We'll lead off next class with Makefiles.
